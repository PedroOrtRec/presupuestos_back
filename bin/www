#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('presupuestos-back:server');
const http = require('http');

require('dotenv').config();
require('../config/db');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create IO connections
 */

//IMPORTACIÓN DEL MODELO

const User = require('../models/users_mongo.model');

//CONFIG .ENV Y DB

require('dotenv').config();
require('../config/mongodb');


/**
 * Config socket.io
 
*/
const io = require('socket.io')(server, {
  cors: { origin: '*' }
});

//CONEXIÓN

io.on('connection', (socket) => {
  console.log('se ha conectado un cliente');

  socket.broadcast.emit('mensaje_chat', {
    user: 'INFO',
    mensaje: 'Se ha conectado un nuevo cliente'
  });

  socket.on('nuevo_usuario', async (data) => {
    const user = await User.create(data);

    socket.emit('confirmacion_registro', user)
  });

  socket.on('entro_chat', async () => {
    console.log(socket.id);
    const user = await User.findOne({ socket_id: socket.id });
    console.log(user);
  });

  socket.on('disconnect', () => {
    socket.broadcast.emit('mensaje_chat', {
      user: 'INFO',
      mensaje: 'Se ha desconectado un nuevo cliente'
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
